{
  "scopeName": "source.lambda",
  "name": "Lambda Script",
  "fileTypes": ["ls"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#constants" },
    { "include": "#strings" },
    { "include": "#datetime" },
    { "include": "#binary" },
    { "include": "#numbers" },
    { "include": "#elements" },
    { "include": "#function_definition" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#types" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.lambda",
          "match": "//.*"
        },
        {
          "name": "comment.block.lambda",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            { "include": "#comments" } 
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.lambda",
          "match": "\\b(fn|let|if|else|for|in|to|return|import)\\b"
        },
        {
          "name": "keyword.operator.logical.lambda",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.lambda",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.lambda",
          "match": "\\b(null)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.lambda",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "include": "#escape_sequence" }
          ]
        },
        {
          "name": "string.quoted.single.symbol.lambda",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "include": "#escape_sequence" }
          ]
        }
      ]
    },
    "escape_sequence": {
      "name": "constant.character.escape.lambda",
      "match": "\\\\(\"|\\\\|/|b|f|n|r|t|u[0-9a-fA-F]{4}|u\\{[0-9a-fA-F]+\\})"
    },
    "binary": {
      "name": "string.other.binary.lambda",
      "begin": "b'",
      "end": "'",
      "patterns": [
        {
          "match": "\\\\x[0-9a-fA-F\\s]+|\\\\64([A-Za-z0-9+/]{4}|\\s+)*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?"
        }
      ]
    },
    "datetime": {
      "name": "constant.other.datetime.lambda",
      "begin": "t'",
      "end": "'",
      "patterns": [
        {
          "comment": "Simplified regex for date/time, may need refinement based on grammar.js",
          "match": "\\s*-?\\d{4}(?:-\\d{2})?(?:-\\d{2})?(?:\\s+\\d{2}(?::\\d{2})?(?::\\d{2})?(?:\\.\\d{3})?(?:[zZ]|[+-]\\d{2}(?::\\d{2})?)?)?\\s*"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.lambda",
          "match": "\\b-?(?:\\d+\\.\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.lambda",
          "match": "\\b-?(?:0|[1-9]\\d*)\\b"
        }
      ]
    },
    "operators": {
      "name": "keyword.operator.lambda",
      "match": "\\*\\*|==|!=|<=|>=|[-+*/%_/<>]|="
    },
    "punctuation": {
      "patterns": [
        { "match": "[(){}\\[\\]]", "name": "punctuation.bracket.lambda" },
        { "match": "[,:;.]", "name": "punctuation.separator.lambda" }
      ]
    },
    "types": {
      "name": "storage.type.lambda",
      "match": "\\b(any|error|boolean|int|float|decimal|number|string|symbol|date|time|datetime|list|array|map|element|type|function)\\b"
    },
    "function_definition": {
      "patterns": [
        {
          "name": "meta.function.lambda",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)?\\s*\\(",
          "beginCaptures": {
            "1": { "name": "keyword.control.fn.lambda" },
            "2": { "name": "entity.name.function.lambda" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#keywords" },
            { "include": "#constants" },
            { "include": "#operators" },
            { "include": "#punctuation" },
            { "include": "#types" },
            { "include": "#identifiers" },
            { "include": "$self" } 
          ]
        }
      ]
    },
    "elements": {
      "patterns": [
        {
          "name": "meta.tag.opening.lambda",
          "begin": "<\\s*([a-zA-Z_][a-zA-Z0-9_]*)(?=[^>]*>)",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.tag.begin.lambda" },
            "1": { "name": "entity.name.tag.lambda" }
          },
          "end": ">",
          "endCaptures": {
            "0": { "name": "punctuation.definition.tag.end.lambda" }
          },
          "patterns": [
            { "include": "#comments" },
            {
              "name": "entity.other.attribute-name.lambda",
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
              "captures": {
                "1": { "name": "entity.other.attribute-name.lambda" }
              }
            },
            { "include": "#strings" },
            { "include": "#constants" },
            { "include": "#numbers" }
          ]
        },
        {
          "name": "meta.tag.closing.lambda",
          "match": "</\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*>",
          "captures": {
            "0": { "name": "punctuation.definition.tag.lambda" },
            "1": { "name": "entity.name.tag.lambda" }
          }
        }
      ]
    },
    "identifiers": {
      "name": "variable.other.lambda",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    }
  }
}
