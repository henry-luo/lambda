{
    "compiler": "clang",
    "output": "lambda.exe",
    "source_dirs":[
        "lambda/input",
        "lambda/format"
    ],
    "source_files": [
        "lambda/tree-sitter-lambda/src/parser.c",
        "lambda/parse.c",
        "lib/strbuf.c",
        "lib/strview.c",
        "lib/arraylist.c",
        "lib/file.c",
        "lib/hashmap.c",
        "lib/log.c",
        "lib/mem-pool/src/variable.c",
        "lib/mem-pool/src/buffer.c",
        "lib/mem-pool/src/utils.c",
        "lib/url.c",
        "lib/url_parser.c",
        "lib/utf.c",
        "lib/num_stack.c",
        "lib/string.c",
        "lib/datetime.c",
        "lambda/lambda-data.cpp",
        "lambda/lambda-data-runtime.cpp",
        "lambda/runner.cpp",
        "lambda/transpile.cpp",
        "lambda/transpile-mir.cpp",
        "lambda/build_ast.cpp",
        "lambda/name_pool.cpp",
        "lambda/mir.c",
        "lambda/pack.cpp",
        "lambda/print.cpp",
        "lambda/lambda-eval.cpp",
        "lambda/utf_string.cpp",
        "lambda/lambda-mem.cpp",
        "lambda/validator/validate.cpp",
        "lambda/validator/validator.cpp",
        "lambda/validator/schema_parser.cpp",
        "lambda/main.cpp"
    ],
    "libraries": [     
        {
            "name": "tree-sitter",
            "include": "lambda/tree-sitter/lib/include",
            "lib": "lambda/tree-sitter/libtree-sitter.a",
            "link": "static"
        },
        {
            "name": "tree-sitter-lambda",
            "include": "lambda/tree-sitter-lambda/bindings/c",
            "lib": "lambda/tree-sitter-lambda/libtree-sitter-lambda.a",
            "link": "static"
        },
        {
            "name": "mir",
            "include": "/usr/local/include",
            "lib": "/usr/local/lib/libmir.a",
            "link": "static"
        },
        {
            "name": "mpdec",
            "include": "/opt/homebrew/Cellar/mpdecimal/4.0.1/include",
            "lib": "/opt/homebrew/Cellar/mpdecimal/4.0.1/lib/libmpdec.a",
            "link": "static"
        },
        {
            "name": "readline",
            "include": "/opt/homebrew/include",
            "lib": "/opt/homebrew/lib",
            "link": "dynamic"
        },
        {
            "name": "criterion",
            "include": "/opt/homebrew/Cellar/criterion/2.4.2_2/include",
            "lib": "/opt/homebrew/Cellar/criterion/2.4.2_2/lib",
            "link": "dynamic"
        },
        {
            "name": "utf8proc",
            "include": "/opt/homebrew/include",
            "lib": "/opt/homebrew/lib/libutf8proc.a",
            "link": "static",
            "version": "2.10.0",
            "description": "Small, clean C library for Unicode normalization, case-folding, and other operations",
            "platforms": {
                "darwin": {
                    "include": "/opt/homebrew/include",
                    "lib": "/opt/homebrew/lib/libutf8proc.a"
                },
                "linux": {
                    "include": "/usr/local/include",
                    "lib": "/usr/local/lib/libutf8proc.a"
                },
                "windows": {
                    "include": "windows-deps/include",
                    "lib": "windows-deps/lib/libutf8proc.a"
                }
            }
        },
        {
            "name": "lambda-lib",
            "description": "Unified runtime with all basic libraries for tests",
            "include": "lib/mem-pool/include",
            "sources": [
                "lib/mem-pool/src/variable.c",
                "lib/mem-pool/src/buffer.c",
                "lib/mem-pool/src/utils.c",
                "lib/strbuf.c",
                "lib/strview.c",
                "lib/string.c",
                "lib/num_stack.c",
                "lib/datetime.c",
                "lib/url.c",
                "lib/url_parser.c",
                "lib/log.c",
                "lambda/input/mime-detect.c",
                "lambda/input/mime-types.c"
            ],
            "libraries": ["criterion"],
            "special_flags": "",
            "link": "static"
        },
        {
            "name": "lambda-input-full",
            "description": "Complete input processing and formatting with all dependencies",
            "source_patterns": [
                "lambda/input/input*.cpp",
                "lambda/format/format*.cpp"
            ],
            "source_files": [
                "lambda/print.cpp", 
                "lambda/utf_string.cpp",
                "lambda/name_pool.cpp",
                "lambda/lambda-data.cpp",
                "lambda/validator/validate.cpp",
                "lambda/validator/schema_parser.cpp",
                "lambda/validator/validator.cpp",
                "lambda/parse.c",
                "lib/arraylist.c", 
                "lib/hashmap.c",
                "lib/file.c", 
                "lib/log.c",
                "lib/utf.c"
            ],
            "libraries": ["lambda-lib", "tree-sitter-lambda", "tree-sitter", "mpdec", "utf8proc", "criterion"],
            "include": "lib/mem-pool/include",
            "special_flags": "-lstdc++",
            "link": "static"
        },
        {
            "name": "lambda-runtime-full",
            "description": "Complete Lambda runtime with all dependencies for complex tests",
            "source_patterns": [
                "lambda/input/input*.cpp",
                "lambda/format/format*.cpp"
            ],
            "source_files": [
                "lambda/print.cpp", 
                "lambda/transpile.cpp", 
                "lambda/transpile-mir.cpp", 
                "lambda/utf_string.cpp",
                "lambda/build_ast.cpp", 
                "lambda/lambda-data.cpp", 
                "lambda/lambda-data-runtime.cpp",
                "lambda/lambda-eval.cpp", 
                "lambda/lambda-mem.cpp",
                "lambda/runner.cpp", 
                "lambda/mir.c", 
                "lambda/parse.c", 
                "lambda/tree-sitter-lambda/src/parser.c",
                "lambda/name_pool.cpp", 
                "lambda/validator/validate.cpp", 
                "lambda/validator/validator.cpp", 
                "lambda/validator/schema_parser.cpp", 
                "lambda/pack.cpp",
                "lambda/input/input-common.cpp",
                "lib/arraylist.c", 
                "lib/hashmap.c",
                "lib/file.c", 
                "lib/log.c", 
                "lib/utf.c"
            ],
            "libraries": ["mem-pool", "strbuf", "strview", "string", "num_stack", "datetime", "url", "mime-detect", "criterion"],
            "include": "lib/mem-pool/include",
            "special_flags": "-lstdc++",
            "link": "static"
        }
    ],
    "warnings": [
        "format",
        "incompatible-pointer-types",
        "multichar"
    ],
    "flags": [
        "fms-extensions",
        "pedantic",
        "fcolor-diagnostics",
        "fno-omit-frame-pointer",
        "g",
        "O0"
    ],
    "linker_flags": [
    ],
    "debug": true,
    "build_dir": "build",
    "platforms": {
        "debug": {
            "output": "lambda_debug.exe",
            "flags": [
                "std=c++17",
                "fms-extensions",
                "pedantic",
                "fcolor-diagnostics",
                "fsanitize=address",
                "fno-omit-frame-pointer",
                "g",
                "O0"
            ],
            "linker_flags": [
                "fsanitize=address"
            ],
            "build_dir": "build_debug",
            "debug": true
        },
        "windows": {
            "output": "lambda-windows.exe",
            "libraries": [
                {
                    "name": "tree-sitter",
                    "include": "lambda/tree-sitter/lib/include",
                    "lib": "lambda/tree-sitter/libtree-sitter-windows.a",
                    "link": "static"
                },
                {
                    "name": "tree-sitter-lambda",
                    "include": "lambda/tree-sitter-lambda/bindings/c",
                    "lib": "lambda/tree-sitter-lambda/libtree-sitter-lambda.a",
                    "link": "static"
                },
                {
                    "name": "mir",
                    "include": "windows-deps/include",
                    "lib": "windows-deps/lib/libmir.a",
                    "link": "static"
                },
                {
                    "name": "clock_compat",
                    "lib": "clock_compat_windows.o",
                    "link": "static"
                }
            ],
            "flags": [
                "std=c++17",
                "fms-extensions",
                "static",
                "DCROSS_COMPILE",
                "D_WIN32",
                "DWINVER=0x0601",
                "D_WIN32_WINNT=0x0601",
                "D__USE_MINGW_ANSI_STDIO=1",
                "D_POSIX_C_SOURCE=199309L",
                "D_TIMESPEC_DEFINED"
            ],
            "linker_flags": [
                "static-libgcc",
                "static-libstdc++",
                "Wl,--subsystem,console",
                "lwinmm",
                "lkernel32",
                "lpthread"
            ],
            "build_dir": "build_windows",
            "cross_compile": true,
            "target_triplet": "x86_64-w64-mingw32"
        }
    },
    "test": {
        "test_suites": [
            {
                "suite": "library",
                "name": "📚 Library Tests",
                "sources": [
                    "test_strbuf.c",
                    "test_strview.c",
                    "test_variable_pool.c",
                    "test_num_stack.c",
                    "test_datetime.c",
                    "test_url.c",
                    "test_url_extra.c"
                ],
                "library_dependencies": [
                    ["lambda-lib"],
                    ["lambda-lib"],
                    ["lambda-lib"],
                    ["lambda-lib"],
                    ["lambda-lib"],
                    ["lambda-lib"],
                    ["lambda-lib"],
                    "one for each of the test executable"
                ],
                "binaries": [
                    "test_strbuf.exe",
                    "test_strview.exe",
                    "test_variable_pool.exe",
                    "test_num_stack.exe",
                    "test_datetime.exe",
                    "test_url.exe",
                    "test_url_extra.exe"
                ],
                "type": "library",
                "special_flags": "-fms-extensions",
                "parallel": true
            },
            {
                "suite": "input",
                "name": "📄 Input Processing Tests",
                "sources": [
                    "test_mime_detect.c",
                    "test_math.cpp",
                    "test/test_markup_roundtrip.cpp"
                ],
                "library_dependencies": [
                    ["lambda-input-full"],
                    ["lambda-input-full"],
                    ["lambda-input-full"],
                    "one for each of the test executable"
                ],
                "binaries": [
                    "test_mime_detect.exe",
                    "test_math.exe",
                    "test_markup_roundtrip.exe"
                ],
                "type": "input",
                "special_flags": "-fms-extensions -lstdc++",
                "cpp_flags": "-std=c++17",
                "parallel": true
            },
            {
                "suite": "validator",
                "name": "🔍 Validator Tests",
                "sources": ["test/test_validator.cpp"],
                "library_dependencies": [
                    ["lambda-input-full"]
                ],
                "binaries": ["test/test_validator.exe"],
                "type": "validator",
                "special_flags": "-std=c++17 -lstdc++",
                "uses_build_config": true,
                "environment": {
                    "TEST_DIR_PATH": "$PWD/test/lambda/validator",
                    "LAMBDA_EXE_PATH": "$PWD/lambda.exe"
                },
                "requires_lambda_exe": true,
                "parallel": false,
                "compiler": "clang++"
            },            
            {
                "suite": "mir",
                "name": "⚡ MIR JIT Tests",
                "sources": ["test/test_mir.c"],
                "library_dependencies": [
                    ["lambda-runtime-full"]
                ],
                "binaries": ["test/test_mir.exe"],
                "type": "mir",
                "special_flags": "-std=c99 -Wall -Wextra -O2 -g -fms-extensions -pedantic -lstdc++",
                "uses_build_config": true,
                "requires_jq": true,
                "parallel": true
            },
            {
                "suite": "lambda",
                "name": "🐑 Lambda Runtime Tests",
                "sources": ["test/test_lambda.cpp"],
                "library_dependencies": [
                    ["lambda-runtime-full"]
                ],
                "binaries": ["test/test_lambda.exe"],
                "type": "lambda",
                "special_flags": "-fms-extensions -lstdc++",
                "uses_build_config": true,
                "requires_jq": true,
                "parallel": true
            },
            {
                "suite": "lambda-std",
                "name": "🧪 Lambda Standard Tests",
                "sources": ["test/lambda_test_runner.cpp"],
                "library_dependencies": [
                    ["lambda-runtime-full"]
                ],
                "binaries": ["test/lambda_test_runner.exe"],
                "type": "lambda-std",
                "special_flags": "-std=c++17 -lstdc++",
                "uses_build_config": true,
                "requires_jq": false,
                "parallel": true,
                "test_runner": {
                    "type": "custom",
                    "executable": "test/lambda_test_runner.exe",
                    "test_dir": "test/std",
                    "output_formats": ["json", "tap"],
                    "json_output": "test_output/lambda_test_runner_results.json",
                    "tap_output": "test_output/lambda_test_runner_results.tap",
                    "command_args": ["--test-dir", "test/std", "--format", "both", "--json-output", "test_output/lambda_test_runner_results.json", "--tap-output", "test_output/lambda_test_runner_results.tap"]
                }
            }
        ],
        "output_dir": "test_output"
    }
}
