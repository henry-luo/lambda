#!/bin/bash

# Define file paths
PARSER_C="lambda/tree-sitter-lambda/src/parser.c"
TS_ENUM_H="lambda/ts-enum.h"
TEMP_TS_ENUM_H=$(mktemp)
TEMP_ENUM_FILE=$(mktemp) # Temporary file for extracted enum content

# Check if parser.c exists
if [ ! -f "$PARSER_C" ]; then
  echo "Error: $PARSER_C not found."
  rm -f "$TEMP_TS_ENUM_H" "$TEMP_ENUM_FILE" # Clean up temp files on error
  exit 1
fi

# --- Extract ts_symbol_identifiers ---

# Find the start line of the ts_symbol_identifiers enum (exact match)
START_LINE_SYMBOLS=$(grep -nx 'enum ts_symbol_identifiers {' "$PARSER_C" | cut -d: -f1)

if [ -z "$START_LINE_SYMBOLS" ]; then
  echo "Error: Could not find start of enum ts_symbol_identifiers definition in $PARSER_C."
  rm -f "$TEMP_TS_ENUM_H" "$TEMP_ENUM_FILE"
  exit 1
fi

# Find the end line (first '};' on its own line after the start)
# Use awk to process lines from parser.c starting *after* START_LINE_SYMBOLS
END_LINE_SYMBOLS=$(awk -v start="$START_LINE_SYMBOLS" 'NR > start && /^[[:space:]]*};[[:space:]]*$/ {print NR; exit}' "$PARSER_C")


if [ -z "$END_LINE_SYMBOLS" ]; then
  echo "Error: Could not find end of enum ts_symbol_identifiers definition (looking for '};' on its own line) in $PARSER_C after line $START_LINE_SYMBOLS."
  rm -f "$TEMP_TS_ENUM_H" "$TEMP_ENUM_FILE"
  exit 1
fi

# Extract the enum definition for ts_symbol_identifiers
sed -n "${START_LINE_SYMBOLS},${END_LINE_SYMBOLS}p" "$PARSER_C" > "$TEMP_ENUM_FILE"

# Write the extracted enum to the temporary header file
echo "// Generated by update_ts_enum.sh from $PARSER_C" > "$TEMP_TS_ENUM_H"
echo "#pragma once" >> "$TEMP_TS_ENUM_H"
echo "" >> "$TEMP_TS_ENUM_H"
cat "$TEMP_ENUM_FILE" >> "$TEMP_TS_ENUM_H"
echo "" >> "$TEMP_TS_ENUM_H" # Add a newline after the first enum

# --- Extract ts_field_identifiers ---

# Find the start line of the ts_field_identifiers enum (exact match)
START_LINE_FIELDS=$(grep -nx 'enum ts_field_identifiers {' "$PARSER_C" | cut -d: -f1)

if [ -z "$START_LINE_FIELDS" ]; then
  echo "Warning: Could not find start of enum ts_field_identifiers definition in $PARSER_C. Skipping."
  # If fields enum is not found, proceed without it, but keep the symbols enum
else
  # Find the end line (first '};' on its own line after the start)
  END_LINE_FIELDS=$(awk -v start="$START_LINE_FIELDS" 'NR > start && /^[[:space:]]*};[[:space:]]*$/ {print NR; exit}' "$PARSER_C")

  if [ -z "$END_LINE_FIELDS" ]; then
    echo "Warning: Could not find end of enum ts_field_identifiers definition (looking for '};' on its own line) in $PARSER_C after line $START_LINE_FIELDS. Skipping."
    # Proceed, maybe the enum is empty or malformed, but don't fail the whole script
  else
    # Extract the enum definition for ts_field_identifiers
    sed -n "${START_LINE_FIELDS},${END_LINE_FIELDS}p" "$PARSER_C" > "$TEMP_ENUM_FILE"

    # Append the extracted enum to the temporary header file
    cat "$TEMP_ENUM_FILE" >> "$TEMP_TS_ENUM_H"
    echo "" >> "$TEMP_TS_ENUM_H" # Add a newline after the second enum
  fi
fi


# Replace the old header file with the new one
mv "$TEMP_TS_ENUM_H" "$TS_ENUM_H"

# Clean up temporary file
rm "$TEMP_ENUM_FILE"

echo "Updated enums in $TS_ENUM_H"
