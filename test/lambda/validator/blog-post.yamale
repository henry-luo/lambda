# Yamale schema for blog post management system
# This schema demonstrates typical Yamale validators and patterns

# Main blog post document
title: str(min=5, max=100, required=True)
slug: str(matches='^[a-z0-9-]+$', required=True)
author: include('author')
content: str(min=50, required=True)
excerpt: str(max=500, required=False)
published: bool(required=True)
publishDate: day(min='2020-01-01', required=False)
lastModified: timestamp(required=False)
tags: list(str(min=1, max=30), min=1, max=10)
categories: list(enum('technology', 'science', 'lifestyle', 'business', 'education'), min=1, max=3)
metadata: include('post_metadata')
comments: list(include('comment'), required=False)
relatedPosts: list(int(min=1), max=5, required=False)
seo: include('seo_data', required=False)
status: enum('draft', 'published', 'archived', 'scheduled')

---
# Author information include
author:
  id: int(min=1)
  username: str(min=3, max=20, matches='^[a-zA-Z0-9_]+$')
  displayName: str(min=1, max=50)
  email: str(matches='^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
  bio: str(max=500, required=False)
  avatar: str(required=False)
  socialLinks: map(str(), key=enum('twitter', 'linkedin', 'github', 'website'), required=False)
  verified: bool()
  joinDate: day()

---
# Post metadata include
post_metadata:
  wordCount: int(min=0)
  readingTime: int(min=1)
  language: enum('en', 'es', 'fr', 'de', 'ja', 'zh', 'pt', 'ru')
  difficulty: enum('beginner', 'intermediate', 'advanced')
  featured: bool()
  sticky: bool()
  allowComments: bool()
  viewCount: int(min=0)
  likeCount: int(min=0)
  shareCount: int(min=0)

---
# Comment include with recursion support
comment:
  id: int(min=1)
  authorName: str(min=1, max=50)
  authorEmail: str(matches='^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
  content: str(min=1, max=2000)
  timestamp: timestamp()
  approved: bool()
  replies: list(include('comment'), required=False)
  parentId: int(min=1, required=False)

---
# SEO data include
seo_data:
  metaTitle: str(max=60, required=False)
  metaDescription: str(max=160, required=False)
  canonicalUrl: str(required=False)
  openGraph: include('open_graph', required=False)
  schema: map(any(), required=False)

---
# Open Graph data for social media
open_graph:
  title: str(max=60)
  description: str(max=160)
  image: str()
  imageAlt: str(max=100, required=False)
  type: enum('article', 'website', 'blog')
  locale: str(matches='^[a-z]{2}_[A-Z]{2}$', required=False)
